<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="dev.mvc.record.RecordDAOInter">
  <!-- 등록한 레코드 갯수 1 리턴, #{reviewerno}: public int getAdminno() 호출됨 -->
  <insert id="create" parameterType="dev.mvc.record.RecordVO">
    INSERT INTO record(recordno, reviewerno, bookno, title, record, passwd, word,
                                     file1, file1saved, thumb1, size1, rdate)
    VALUES(record_seq.nextval, #{reviewerno}, #{bookno}, #{title}, #{record}, #{passwd}, #{word},
                #{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate)
  </insert>

  <!-- 모든 카테고리의 등록된 글목록 -->
  <select id="list_all" resultType="dev.mvc.record.RecordVO">
    SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, passwd, word, rdate,
               file1, file1saved, thumb1, size1, mp4
    FROM record
    ORDER BY recordno DESC
  </select>
  
  <!-- 특정 카테고리의 등록된 글목록 -->
  <select id="list_by_bookno" resultType="dev.mvc.record.RecordVO" parameterType="int">
    SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, rdate,
              LOWER(file1) as file1, file1saved, thumb1, size1, mp4
    FROM record 
    WHERE bookno = #{bookno}
    ORDER BY recordno DESC
  </select> 
  
  <!-- 일반적인 조회 -->
  <select id="read" resultType="dev.mvc.record.RecordVO" parameterType="int">
    SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, passwd, word, rdate,
              file1, file1saved, thumb1, size1, map, youtube
    FROM record
    WHERE recordno = #{recordno}
  </select>
  
  <!-- map 등록, 수정, 삭제, 
         HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
                       보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
  <update id="map" parameterType="HashMap">
    UPDATE record SET map=#{map} WHERE recordno=#{recordno}
  </update>

  <!-- Youtube 등록, 수정, 삭제, 
         HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
                       보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
  <update id="youtube" parameterType="HashMap">
    UPDATE record SET youtube=#{youtube} WHERE recordno=#{recordno}
  </update>

  <!-- 카테고리별 검색 목록 -->
  <select id="list_by_bookno_search" resultType="dev.mvc.record.RecordVO" parameterType="HashMap">
    SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, word, rdate,
            file1, file1saved, thumb1, size1, map, youtube
    FROM record
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
        WHERE bookno=#{bookno}
      </when>
      <otherwise> <!-- 검색하는 경우 -->
        WHERE bookno=#{bookno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(record) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
    ORDER BY recordno DESC   
  </select>
   
  <!-- 카테고리별 검색 레코드 갯수 -->
  <select id="list_by_bookno_search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM record
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE bookno=#{bookno}
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE bookno=#{bookno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(record) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
  </select>   

  <!-- 카테고리별 검색 + 페이징 목록 -->
  <select id="list_by_bookno_search_paging" resultType="dev.mvc.record.RecordVO" parameterType="HashMap">
   SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, r
   FROM (
              SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, rownum as r
              FROM (
                        SELECT recordno, reviewerno, bookno, title, record, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube
                        FROM record
                        <choose>
                          <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
                            WHERE bookno=#{bookno}
                          </when>
                          <otherwise>
                            WHERE bookno=#{bookno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                              OR UPPER(record) LIKE '%' || UPPER(#{word}) || '%' 
                                                              OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
                          </otherwise>
                        </choose>
                        ORDER BY recordno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
    <!-- 1 page: WHERE r >= 1 AND r <= 10; 
          2 page: WHERE r >= 11 AND r <= 20;
          3 page: WHERE r >= 21 AND r <= 30; -->
  </select>
  
  <!-- 패스워드 검사 -->
  <select id="password_check" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt 
    FROM record
    WHERE recordno = #{recordno} AND passwd=#{passwd}
  </select>
  
  <!-- 글 수정 -->
  <update id="update_text" parameterType="dev.mvc.record.RecordVO">
    UPDATE record
    SET title=#{title}, record=#{record},  word=#{word}
    WHERE recordno = #{recordno}
  </update>


  <!-- 파일 수정 -->
  <update id="update_file" parameterType="dev.mvc.record.RecordVO">
    UPDATE record
    SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
    WHERE recordno = #{recordno}
  </update>  

  <!-- 글 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM record
    WHERE recordno=#{recordno}
  </delete>
  
  <!-- FK bookno 컬럼에 대응하는 필수 SQL -->
  <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_bookno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM record 
    WHERE bookno=#{bookno}
  </select>
  
  <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_bookno" parameterType="int">
    DELETE FROM record
    WHERE bookno=#{bookno}
  </delete>

  <!-- FK reviewerno 컬럼에 대응하는 필수 SQL -->
  <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_reviewerno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM record 
    WHERE reviewerno=#{reviewerno}
  </select>
  
  <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_reviewerno" parameterType="int">
    DELETE FROM record
    WHERE reviewerno=#{reviewerno}
  </delete>

   <!-- 댓글 수 증가 -->
   <update id="increaseReplycnt" parameterType="int">
     UPDATE record
     SET replycnt = replycnt + 1
     WHERE recordno = #{recordno}
   </update>

   <!-- 댓글 수 감소 -->
   <update id="decreaseReplycnt" parameterType="int">
     UPDATE record
     SET replycnt = replycnt - 1
     WHERE recordno = #{recordno}
   </update>
               
   <update id="update_cnt_up" parameterType="int">
     UPDATE books
     SET cnt = cnt + 1
     WHERE bookno = ${bookno}
   </update>
   
   <update id="update_cnt_down" parameterType="int">
     UPDATE books
     SET cnt = cnt - 1
     WHERE bookno = ${bookno}
   </update>
   
   <update id="update_grp_cnt_up" parameterType="String">
     UPDATE books
     SET cnt = cnt + 1
     WHERE title = '--' AND author =#{author}
   </update>
   
   <update id="update_grp_cnt_down" parameterType="String">
     UPDATE books
     SET cnt = cnt - 1
     WHERE title = '--' AND author =#{author}
   </update>
   
    <!-- 추천 수 증가 -->
  <update id="increaseRecom" parameterType="int">
    UPDATE record
    SET recom = recom + 1
    WHERE recordno = #{recordno}
  </update>
      
  <!-- 추천 수 감소 -->
  <update id="decreaseRecom" parameterType="int">
    UPDATE record
    SET recom = recom - 1
    WHERE recordno = #{recordno}
  </update> 
</mapper> 
